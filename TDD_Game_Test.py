# -*- coding: utf-8 -*-
"""582-testcase

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bnIijfrIpcTkUp0D41N22brRqzbVTqGG
"""

# test case 1

import unittest
from calculator import Calculator

class TestCalculator(unittest.TestCase):

    def test_generate_random_number_unique_digits(self):
        calculator = Calculator()
        random_number = calculator.generate_random_number()
        self.assertEqual(len(random_number), 4, "Random number should have a length of 4")
        self.assertTrue(all(c.isdigit() for c in random_number), "Random number should consist of digits")
        self.assertEqual(len(set(random_number)), 4, "Random number should have unique digits")

if __name__ == '__main__':
    unittest.main()

# calculatro

class Calculator:
    def add(self, a, b):
        return a + b

    def generate_random_number(self):
        import random

        while True:
            random_number = ''.join(random.sample('0123456789', 4))
            if len(set(random_number)) == 4:
                return random_number

#test case 2

import unittest
from calculator import Calculator

class TestCalculator(unittest.TestCase):

    def test_add(self):
        calculator = Calculator()
        result = calculator.add(2, 3)
        self.assertEqual(result, 5, "Addition should return 5")

if __name__ == '__main__':
    unittest.main()

# test case 3

import unittest
from unittest.mock import patch
from game import play_game

class TestUserInputValidation(unittest.TestCase):

    @patch('builtins.input', side_effect=["abcd", "exit"])
    def test_invalid_input_display_message(self, mock_input):
        with patch('builtins.print') as mock_print:
            play_game()
            expected_message = "Please enter a valid four-digit number."
            mock_print.assert_called_with(expected_message)

if __name__ == '__main__':
    unittest.main()

#test case 4

import unittest
from unittest.mock import patch
from game import play_game


class TestPlayerWin(unittest.TestCase):

    @patch('builtins.input', side_effect=["1234", "exit"])
    def test_player_wins(self, mock_input):
        with patch('builtins.print') as mock_print:
            play_game()
            expected_message = "Congratulations! You guessed it right in 1 attempts."
            play_again_message = "Do you want to play again? (Y/N): "
            expected_play_again_message = "GG"

            mock_print.assert_any_call(expected_message)
            mock_print.assert_any_call(play_again_message)
            mock_input.assert_called_with(play_again_message)
            mock_print.assert_called_with(expected_play_again_message)


if __name__ == '__main__':
    unittest.main()